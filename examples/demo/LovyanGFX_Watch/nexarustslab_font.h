// Auto-generated font file for LovyanGFX
// Converted from: NexaRustSlab-Trial-Black3.ttf
// Font size: 18pt
// Character dimensions: 13x13

#include <LovyanGFX.hpp>

namespace nexarustslab_font {
    const uint8_t font_data[] = {
        // Character: '0' (ASCII: 48)
        26, // width in bytes
        13, // height
        48, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x3F, 0xE0, 0x3F, 0xB0, 0x78, 0xF8, 0x78, 0x68, 0x78, 0x48, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7C, 0xF8, 0x3F, 0xF0,

        // Character: '1' (ASCII: 49)
        26, // width in bytes
        13, // height
        49, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x7C, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0xBC, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x24, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0xFE, 0x00,

        // Character: '2' (ASCII: 50)
        26, // width in bytes
        13, // height
        50, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x3F, 0xE0, 0x3F, 0xF0, 0x78, 0xB0, 0x00, 0xB0, 0x0F, 0xF0, 0x3F, 0xE0, 0x3F, 0xC0, 0x78, 0x70, 0x78, 0x70, 0x6F, 0xF0,

        // Character: '3' (ASCII: 51)
        26, // width in bytes
        13, // height
        51, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x7D, 0xF0, 0x7F, 0xA0, 0x73, 0xC0, 0x03, 0x80, 0x07, 0xC0, 0x07, 0xE0, 0x00, 0xF0, 0x70, 0xF0, 0xF8, 0xB0, 0x7F, 0xE0,

        // Character: '4' (ASCII: 52)
        26, // width in bytes
        13, // height
        52, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x03, 0xE0, 0x07, 0xE0, 0x0F, 0xE0, 0x1F, 0xE0, 0x3D, 0xE0, 0x79, 0xE0, 0xF1, 0x20, 0xFF, 0x30, 0xF9, 0xB0, 0x71, 0xF0,

        // Character: '5' (ASCII: 53)
        26, // width in bytes
        13, // height
        53, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x7F, 0xE0, 0x7F, 0xE0, 0x78, 0x00, 0x7F, 0x80, 0x7F, 0xC0, 0x7F, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x78, 0xE0, 0x7F, 0xE0,

        // Character: '6' (ASCII: 54)
        26, // width in bytes
        13, // height
        54, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x6F, 0xC0, 0x7F, 0xE0, 0xF1, 0xE0, 0xF0, 0x00, 0xFF, 0x80, 0xFF, 0xE0, 0xF1, 0xE0, 0xF0, 0xE0, 0xF1, 0xE0, 0xFF, 0xE0,

        // Character: '7' (ASCII: 55)
        26, // width in bytes
        13, // height
        55, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0xFF, 0xE0, 0xFF, 0xE0, 0xE3, 0x40, 0xE2, 0xC0, 0x07, 0x80, 0x05, 0x80, 0x0F, 0x00, 0x0F, 0x00, 0x1E, 0x00, 0x1E, 0x00,

        // Character: '8' (ASCII: 56)
        26, // width in bytes
        13, // height
        56, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x3F, 0xF0, 0x3F, 0xF0, 0x38, 0x70, 0x38, 0xF0, 0x3F, 0xF0, 0x3F, 0xF0, 0x3C, 0xF8, 0x78, 0x78, 0x78, 0x58, 0x7F, 0x98,

        // Character: '9' (ASCII: 57)
        26, // width in bytes
        13, // height
        57, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x3F, 0xE0, 0x7F, 0xE0, 0x7F, 0xD0, 0x70, 0xF0, 0x78, 0xF0, 0x7F, 0xF0, 0x3F, 0xF0, 0x1F, 0xF0, 0x00, 0xF0, 0x78, 0xF0,

        // Character: ':' (ASCII: 58)
        26, // width in bytes
        13, // height
        58, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0xE0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,

        // Character: 'A' (ASCII: 65)
        26, // width in bytes
        13, // height
        65, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x0F, 0xF0, 0x07, 0xF0, 0x03, 0xF8, 0x07, 0xB8, 0x07, 0xA0, 0x0B, 0xE8, 0x0B, 0xF8, 0x1F, 0xF8, 0x1E, 0x08, 0x7F, 0x18,

        // Character: 'B' (ASCII: 66)
        26, // width in bytes
        13, // height
        66, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x7E, 0x58, 0x7F, 0xD8, 0x3C, 0x78, 0x3C, 0x38, 0x3F, 0xF8, 0x3F, 0xF8, 0x3C, 0x78, 0x3C, 0x38, 0x3C, 0x30, 0x7F, 0xD8,

        // Character: 'C' (ASCII: 67)
        26, // width in bytes
        13, // height
        67, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xF8, 0x3F, 0xF8, 0x3C, 0x38, 0x78, 0x38, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x3E, 0x30, 0x3B, 0xF8,

        // Character: 'D' (ASCII: 68)
        26, // width in bytes
        13, // height
        68, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x7F, 0xF0, 0x7F, 0xF8, 0x3C, 0x38, 0x3C, 0x38, 0x3C, 0x18, 0x3C, 0x10, 0x3C, 0x18, 0x3C, 0x38, 0x3F, 0xC8, 0xFF, 0xE8,

        // Character: 'E' (ASCII: 69)
        26, // width in bytes
        13, // height
        69, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x7C, 0xF0, 0x7F, 0xF0, 0x3C, 0x70, 0x3C, 0x00, 0x3F, 0x80, 0x27, 0x80, 0x2B, 0x80, 0x3C, 0x00, 0x3C, 0x30, 0x7F, 0xF0,

        // Character: 'F' (ASCII: 70)
        26, // width in bytes
        13, // height
        70, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x7E, 0xF0, 0x7F, 0xF0, 0x3C, 0x30, 0x3C, 0x00, 0x3F, 0x80, 0x39, 0x80, 0x3F, 0x80, 0x3C, 0x00, 0x3C, 0x00, 0x7F, 0x00,

        // Character: 'G' (ASCII: 71)
        26, // width in bytes
        13, // height
        71, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x1B, 0xF8, 0x3F, 0xF8, 0x6C, 0x38, 0x78, 0x00, 0x79, 0xF8, 0x79, 0xF8, 0x79, 0xF8, 0x78, 0x18, 0x3E, 0x38, 0x3F, 0xF8,

        // Character: 'H' (ASCII: 72)
        26, // width in bytes
        13, // height
        72, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7E, 0xF8, 0x7E, 0xF8, 0x7E, 0xF8, 0x3C, 0x38, 0x3C, 0x38, 0x27, 0xF8, 0x2F, 0xF0, 0x3F, 0xF8, 0x3C, 0x38, 0x3C, 0x38, 0x7E, 0xF8,

        // Character: 'I' (ASCII: 73)
        26, // width in bytes
        13, // height
        73, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xF6, 0x00, 0xFE, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x34, 0x00, 0x2C, 0x00, 0x2C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x7E, 0x00,

        // Character: 'J' (ASCII: 74)
        26, // width in bytes
        13, // height
        74, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x07, 0xF0, 0x07, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xB0, 0x00, 0xB0, 0xE0, 0xD0, 0xE0, 0xF0, 0xF1, 0xE0, 0xFF, 0xE0,

        // Character: 'K' (ASCII: 75)
        26, // width in bytes
        13, // height
        75, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7E, 0xF8, 0x7E, 0xF8, 0x7E, 0xF8, 0x3C, 0xF8, 0x35, 0xF0, 0x3F, 0xC0, 0x2F, 0xC0, 0x27, 0xE0, 0x3E, 0xF0, 0x3C, 0xC8, 0x7E, 0x58,

        // Character: 'L' (ASCII: 76)
        26, // width in bytes
        13, // height
        76, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x6E, 0x00, 0x7E, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x2C, 0x00, 0x2C, 0x30, 0x3C, 0x78, 0x3C, 0x78, 0x7F, 0xF8,

        // Character: 'M' (ASCII: 77)
        26, // width in bytes
        13, // height
        77, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7C, 0x08, 0x7E, 0x18, 0x7D, 0x38, 0x2C, 0xE8, 0x3F, 0xE8, 0x37, 0xF8, 0x3D, 0xE8, 0x3C, 0xC8, 0x3C, 0x48, 0x3C, 0x08, 0x7E, 0x18,

        // Character: 'N' (ASCII: 78)
        26, // width in bytes
        13, // height
        78, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7C, 0x38, 0x7E, 0x38, 0x7F, 0x38, 0x3F, 0x18, 0x3F, 0x98, 0x3F, 0xD0, 0x3D, 0xF0, 0x3D, 0xF8, 0x3C, 0xF8, 0x3C, 0x58, 0x7F, 0x30,

        // Character: 'O' (ASCII: 79)
        26, // width in bytes
        13, // height
        79, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x1F, 0xF8, 0x3F, 0xF8, 0x3C, 0x18, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x7C, 0x18, 0x3E, 0x30, 0x1F, 0xF8,

        // Character: 'P' (ASCII: 80)
        26, // width in bytes
        13, // height
        80, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x7F, 0xF0, 0x7F, 0xD8, 0x3C, 0x48, 0x3C, 0x78, 0x3F, 0xF8, 0x3F, 0xF8, 0x3F, 0xF0, 0x3F, 0xC0, 0x3C, 0x00, 0x7E, 0x00,

        // Character: 'Q' (ASCII: 81)
        26, // width in bytes
        13, // height
        81, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xF8, 0x3F, 0xF8, 0x7C, 0x18, 0x58, 0x18, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x78, 0x18, 0x3C, 0x38, 0x3F, 0xF8,

        // Character: 'R' (ASCII: 82)
        26, // width in bytes
        13, // height
        82, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x77, 0xF0, 0x7F, 0xF8, 0x3C, 0x38, 0x2C, 0x38, 0x34, 0x38, 0x3F, 0xF8, 0x3F, 0xF0, 0x3F, 0xE0, 0x3C, 0x90, 0x7F, 0x78,

        // Character: 'S' (ASCII: 83)
        26, // width in bytes
        13, // height
        83, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x3D, 0xE0, 0x7F, 0xE0, 0x78, 0xE0, 0x78, 0x00, 0x7F, 0xC0, 0x3F, 0xF0, 0x07, 0xF0, 0x70, 0xF0, 0x70, 0xB0, 0x7F, 0xB0,

        // Character: 'T' (ASCII: 84)
        26, // width in bytes
        13, // height
        84, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x7E, 0x78, 0x7F, 0xF8, 0x7F, 0xB8, 0x7F, 0x98, 0x04, 0x80, 0x04, 0x80, 0x07, 0x80, 0x07, 0x80, 0x07, 0x80, 0x0F, 0xE0,

        // Character: 'U' (ASCII: 85)
        26, // width in bytes
        13, // height
        85, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0x78, 0x7F, 0x78, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x18, 0x34, 0x18, 0x34, 0x18, 0x1E, 0x38, 0x1C, 0xF8,

        // Character: 'V' (ASCII: 86)
        26, // width in bytes
        13, // height
        86, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0x78, 0x7F, 0x78, 0x1E, 0x38, 0x1E, 0x38, 0x0F, 0x38, 0x0F, 0x78, 0x05, 0x50, 0x04, 0xD0, 0x03, 0xB0, 0x03, 0xE0,

        // Character: 'W' (ASCII: 87)
        26, // width in bytes
        13, // height
        87, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x38, 0x7F, 0x38, 0x7F, 0x78, 0x1E, 0x78, 0x1E, 0x58, 0x08, 0x70, 0x0B, 0xF8, 0x0F, 0xF8, 0x07, 0xE8, 0x07, 0xE0, 0x03, 0xC0,

        // Character: 'X' (ASCII: 88)
        26, // width in bytes
        13, // height
        88, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x3E, 0xF8, 0x3E, 0xF8, 0x3E, 0x78, 0x0F, 0x58, 0x05, 0xD0, 0x06, 0xE0, 0x06, 0xE0, 0x07, 0xE0, 0x0F, 0xF0, 0x1E, 0xF0, 0x7E, 0xF8,

        // Character: 'Y' (ASCII: 89)
        26, // width in bytes
        13, // height
        89, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0xF8, 0x7F, 0x78, 0x1E, 0x78, 0x0D, 0x20, 0x0F, 0xB0, 0x07, 0xA0, 0x03, 0xE0, 0x01, 0xC0, 0x01, 0xC0, 0x07, 0xE0,

        // Character: 'Z' (ASCII: 90)
        26, // width in bytes
        13, // height
        90, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x77, 0xF0, 0x7F, 0xE0, 0x73, 0xE0, 0x73, 0xC0, 0x05, 0x80, 0x0F, 0x80, 0x0F, 0x00, 0x1E, 0x78, 0x3E, 0x78, 0x3F, 0xF8,

        // Character: 'a' (ASCII: 97)
        26, // width in bytes
        13, // height
        97, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x0F, 0xF0, 0x07, 0xF0, 0x03, 0xF8, 0x07, 0xB8, 0x07, 0xB8, 0x0B, 0xF8, 0x09, 0xB8, 0x1F, 0xF8, 0x1E, 0x08, 0x7F, 0x18,

        // Character: 'b' (ASCII: 98)
        26, // width in bytes
        13, // height
        98, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x7F, 0xF8, 0x7F, 0xF8, 0x3C, 0x38, 0x3C, 0x38, 0x2F, 0xF8, 0x2F, 0x78, 0x3F, 0xF8, 0x3C, 0x38, 0x3C, 0x38, 0x7F, 0xF8,

        // Character: 'c' (ASCII: 99)
        26, // width in bytes
        13, // height
        99, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1D, 0xB8, 0x3F, 0xF8, 0x3C, 0x38, 0x78, 0x38, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x3C, 0x30, 0x3F, 0xF8,

        // Character: 'd' (ASCII: 100)
        26, // width in bytes
        13, // height
        100, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0xFF, 0x70, 0x7F, 0xE0, 0x3C, 0x20, 0x3C, 0x38, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x38, 0x3C, 0x38, 0x7F, 0xF8,

        // Character: 'e' (ASCII: 101)
        26, // width in bytes
        13, // height
        101, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x7E, 0x70, 0x7F, 0xF0, 0x3C, 0x70, 0x3C, 0x00, 0x3F, 0x80, 0x3F, 0x80, 0x3F, 0x80, 0x24, 0x30, 0x3C, 0x70, 0x7F, 0xF0,

        // Character: 'f' (ASCII: 102)
        26, // width in bytes
        13, // height
        102, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x79, 0xF0, 0x7F, 0xF0, 0x3C, 0x30, 0x3C, 0x00, 0x3F, 0x80, 0x27, 0x80, 0x3F, 0x80, 0x3C, 0x00, 0x3C, 0x00, 0x7F, 0x00,

        // Character: 'g' (ASCII: 103)
        26, // width in bytes
        13, // height
        103, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xF8, 0x3F, 0xF8, 0x7C, 0x38, 0x78, 0x00, 0x78, 0xF8, 0x79, 0xF8, 0x78, 0xF8, 0x78, 0x18, 0x3E, 0x38, 0x3E, 0xF8,

        // Character: 'h' (ASCII: 104)
        26, // width in bytes
        13, // height
        104, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0x78, 0x7F, 0x78, 0x3C, 0x18, 0x3C, 0x18, 0x3F, 0xF8, 0x3F, 0xB0, 0x37, 0xF8, 0x3C, 0x18, 0x3C, 0x18, 0x7F, 0x78,

        // Character: 'i' (ASCII: 105)
        26, // width in bytes
        13, // height
        105, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x2C, 0x00, 0x2C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x7E, 0x00,

        // Character: 'j' (ASCII: 106)
        26, // width in bytes
        13, // height
        106, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x07, 0xF0, 0x07, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xFB, 0xF0, 0x7B, 0xE0,

        // Character: 'k' (ASCII: 107)
        26, // width in bytes
        13, // height
        107, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7E, 0xF8, 0x7E, 0xF8, 0x7E, 0xF8, 0x3C, 0xD8, 0x3D, 0xF0, 0x3F, 0xC0, 0x3F, 0xC0, 0x3F, 0xE0, 0x37, 0xF0, 0x3C, 0xF8, 0x7E, 0x78,

        // Character: 'l' (ASCII: 108)
        26, // width in bytes
        13, // height
        108, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x24, 0x00, 0x24, 0x00, 0x3C, 0x78, 0x3C, 0x78, 0x7F, 0xF8,

        // Character: 'm' (ASCII: 109)
        26, // width in bytes
        13, // height
        109, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7C, 0x08, 0x7E, 0x18, 0x7F, 0x18, 0x3F, 0x38, 0x37, 0xF8, 0x2F, 0xF8, 0x2D, 0xE8, 0x3C, 0xC8, 0x3C, 0x48, 0x3C, 0x08, 0x7E, 0x18,

        // Character: 'n' (ASCII: 110)
        26, // width in bytes
        13, // height
        110, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7C, 0x78, 0x7E, 0x78, 0x7E, 0x78, 0x3C, 0x18, 0x3E, 0x98, 0x36, 0xD8, 0x3F, 0xF8, 0x35, 0xF8, 0x3C, 0xF8, 0x3C, 0x78, 0x7F, 0x38,

        // Character: 'o' (ASCII: 111)
        26, // width in bytes
        13, // height
        111, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x1F, 0xF8, 0x3F, 0xF8, 0x3C, 0x18, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x64, 0x18, 0x2F, 0x38, 0x1F, 0xF8,

        // Character: 'p' (ASCII: 112)
        26, // width in bytes
        13, // height
        112, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x7F, 0xF0, 0x7F, 0xF8, 0x3C, 0x78, 0x2C, 0x38, 0x2C, 0x78, 0x3D, 0xF8, 0x3D, 0xF0, 0x3F, 0xC0, 0x3C, 0x00, 0x7E, 0x00,

        // Character: 'q' (ASCII: 113)
        26, // width in bytes
        13, // height
        113, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xD8, 0x3F, 0xF8, 0x3C, 0x30, 0x78, 0x10, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x78, 0x08, 0x7C, 0x18, 0x3F, 0x78,

        // Character: 'r' (ASCII: 114)
        26, // width in bytes
        13, // height
        114, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x7F, 0xD0, 0x7F, 0xF8, 0x3C, 0x38, 0x3C, 0x28, 0x3C, 0x38, 0x37, 0xF8, 0x37, 0xF0, 0x27, 0xE0, 0x3C, 0xF0, 0x7F, 0x78,

        // Character: 's' (ASCII: 115)
        26, // width in bytes
        13, // height
        115, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x3F, 0xE0, 0x7F, 0xE0, 0x78, 0xE0, 0x78, 0x00, 0x7F, 0xC0, 0x3F, 0x60, 0x0F, 0xF0, 0x70, 0xF0, 0x70, 0xF0, 0x7F, 0xF0,

        // Character: 't' (ASCII: 116)
        26, // width in bytes
        13, // height
        116, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x7F, 0xF8, 0x7F, 0xF8, 0x7F, 0xB8, 0x7F, 0xB8, 0x07, 0x80, 0x07, 0x80, 0x04, 0x80, 0x06, 0x80, 0x07, 0x80, 0x0F, 0xE0,

        // Character: 'u' (ASCII: 117)
        26, // width in bytes
        13, // height
        117, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0x78, 0x7F, 0x78, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x18, 0x3C, 0x10, 0x3C, 0x18, 0x1E, 0x38, 0x1F, 0xF8,

        // Character: 'v' (ASCII: 118)
        26, // width in bytes
        13, // height
        118, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0x78, 0x7F, 0x78, 0x1E, 0x38, 0x1E, 0x38, 0x0F, 0x78, 0x0F, 0x78, 0x07, 0x70, 0x04, 0xF0, 0x03, 0xF0, 0x03, 0xE0,

        // Character: 'w' (ASCII: 119)
        26, // width in bytes
        13, // height
        119, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x38, 0x7F, 0x38, 0x7F, 0x78, 0x1E, 0x78, 0x1E, 0x78, 0x0E, 0x78, 0x0B, 0xB8, 0x0F, 0xF8, 0x07, 0xE8, 0x07, 0xE0, 0x07, 0xC0,

        // Character: 'x' (ASCII: 120)
        26, // width in bytes
        13, // height
        120, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x3E, 0xF8, 0x3E, 0xF8, 0x3E, 0x78, 0x0F, 0x58, 0x0F, 0xF0, 0x07, 0x60, 0x07, 0xE0, 0x07, 0xE0, 0x0B, 0xE0, 0x1A, 0xF0, 0x7E, 0x78,

        // Character: 'y' (ASCII: 121)
        26, // width in bytes
        13, // height
        121, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0x78, 0x7F, 0x78, 0x7F, 0x78, 0x1F, 0x28, 0x0F, 0x68, 0x07, 0xF0, 0x04, 0xF0, 0x03, 0xE0, 0x01, 0xC0, 0x01, 0xC0, 0x07, 0xF0,

        // Character: 'z' (ASCII: 122)
        26, // width in bytes
        13, // height
        122, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x73, 0xF0, 0x7F, 0xE0, 0x73, 0xE0, 0x77, 0xC0, 0x07, 0x80, 0x0B, 0x80, 0x0F, 0x00, 0x1E, 0x78, 0x3E, 0x78, 0x3F, 0xF8,

        // Character: '°' (ASCII: 176)
        26, // width in bytes
        13, // height
        176, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,

        // Character: '%' (ASCII: 37)
        26, // width in bytes
        13, // height
        37, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,

        // Character: ' ' (ASCII: 32)
        26, // width in bytes
        13, // height
        32, // ASCII code
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    };
    
    const uint16_t font_info[] = {
        // Format: width_bytes, height, ascii_code, data_offset
        1, 13, 48, 0,
        1, 13, 49, 16,
        1, 13, 50, 32,
        1, 13, 51, 48,
        1, 13, 52, 64,
        1, 13, 53, 80,
        1, 13, 54, 96,
        1, 13, 55, 112,
        1, 13, 56, 128,
        1, 13, 57, 144,
        1, 13, 58, 160,
        1, 13, 65, 176,
        1, 13, 66, 192,
        1, 13, 67, 208,
        1, 13, 68, 224,
        1, 13, 69, 240,
        1, 13, 70, 256,
        1, 13, 71, 272,
        1, 13, 72, 288,
        1, 13, 73, 304,
        1, 13, 74, 320,
        1, 13, 75, 336,
        1, 13, 76, 352,
        1, 13, 77, 368,
        1, 13, 78, 384,
        1, 13, 79, 400,
        1, 13, 80, 416,
        1, 13, 81, 432,
        1, 13, 82, 448,
        1, 13, 83, 464,
        1, 13, 84, 480,
        1, 13, 85, 496,
        1, 13, 86, 512,
        1, 13, 87, 528,
        1, 13, 88, 544,
        1, 13, 89, 560,
        1, 13, 90, 576,
        1, 13, 97, 592,
        1, 13, 98, 608,
        1, 13, 99, 624,
        1, 13, 100, 640,
        1, 13, 101, 656,
        1, 13, 102, 672,
        1, 13, 103, 688,
        1, 13, 104, 704,
        1, 13, 105, 720,
        1, 13, 106, 736,
        1, 13, 107, 752,
        1, 13, 108, 768,
        1, 13, 109, 784,
        1, 13, 110, 800,
        1, 13, 111, 816,
        1, 13, 112, 832,
        1, 13, 113, 848,
        1, 13, 114, 864,
        1, 13, 115, 880,
        1, 13, 116, 896,
        1, 13, 117, 912,
        1, 13, 118, 928,
        1, 13, 119, 944,
        1, 13, 120, 960,
        1, 13, 121, 976,
        1, 13, 122, 992,
        1, 13, 176, 1008,
        1, 13, 37, 1024,
        1, 13, 32, 1040,
    };
    
    const uint16_t font_data_size = sizeof(font_data);
    const uint16_t font_info_size = sizeof(font_info) / sizeof(uint16_t);
}

// Usage example:
// display.setFont(&nexarustslab_font::font_data[0]);
